#!/usr/bin/env escript

%% -*- erlang -*-

-include_lib("xmerl/include/xmerl.hrl").

main(FreeDesktopXml) ->
	{R,_} = xmerl_scan:file(FreeDesktopXml),
	List0 = [{X#xmlAttribute.value, Z#xmlAttribute.value} || #xmlElement{attributes=[X]} = Y <- xmerl_xpath:string("//mime-type", R), #xmlElement{attributes=[Z]} <- xmerl_xpath:string("//glob", Y), re:run(Z#xmlAttribute.value, "^\\*\\.[\\.a-zA-Z0-9]*$") =/= nomatch],

	io:format(
		"%% @author Bob Ippolito <bob@mochimedia.com>\n"
		"%% @author Peter Lemenkov <lemenkov@mochimedia.com>\n"
		"%% @copyright 2007-2011 Mochi Media, Inc.\n\n"
		"%% @doc Gives a good MIME type guess based on file extension.\n"
		"%%      Generated by ../support/parse_mime.py\n\n"
		"-module(mochiweb_mime).\n"
		"-author('bob@mochimedia.com').\n"
		"-export([from_extension/1]).\n\n"
		"%% @spec from_extension(S::string()) -> string() | undefined\n"
		"%% @doc Given a filename extension (e.g. \".html\") return a guess for the MIME\n"
		"%%      type such as \"text/html\". Will return the atom undefined if no good\n"
		"%%      guess is available.\n\n"
	),

	% Drop duplicated extensions
	List1 = lists:foldl(
			fun(X,Acc) ->
				{_D,E} = X,
				case lists:keymember(E, 2, Acc) of
					true -> Acc;
					_ -> [X|Acc]
				end
			end,
		[], List0),

	List = lists:sort(fun ({D1, _E1}, {D2, _E2}) -> D1 =< D2 end, List1),

	lists:map(fun ({Desc,Ext}) -> [$* | BareExt ] = Ext, io:format("from_extension(\"~s\") ->~n    \"~s\";~n", [BareExt, Desc]) end, List),

	io:format("from_extension(_) ->\n    undefined.\n"),
	io:format(
		"%%\n"
		"%% Tests\n"
		"%%\n\n"
		"-ifdef(TEST).\n"
		"-include_lib(\"eunit/include/eunit.hrl\").\n\n"
		"exhaustive_from_extension_test() ->\n"
		"    T = mochiweb_cover:clause_lookup_table(?MODULE, from_extension),\n"
		"    [?assertEqual(V, from_extension(K)) || {K, V} <- T].\n\n"
		"from_extension_test() ->\n"
	),

	lists:map(fun ({Desc,Ext}) -> [$* | BareExt ] = Ext, io:format("    ?assertEqual(\"~s\",~n                 from_extension(\"~s\")),~n", [Desc, BareExt]) end, List),
	io:format(
		"    ?assertEqual(undefined,\n                 from_extension(\"\")),\n"
		"    ?assertEqual(undefined,\n                 from_extension(\".wtf\")),\n"
		"    ok.\n\n"
		"-endif.\n"
	),
	ok;

main(_) ->
	halt(1).
